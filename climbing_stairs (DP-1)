class Solution {
    public int climbStairsmemo(int n) {
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
      return climbStairsRecur(n);

    }

    public int climbStairsRecur(int n){
        if(n<0) return 0;
        if(n==0) return 1;
       
        int ans=0;
        ans+=climbStairsRecur(n-1);
        ans+=climbStairsRecur(n-2);
        return ans;

    }
    public int climbStairsMemo(int n,int[] dp){
        if(n<0) return 0;
        if(n==0) return 1;
        if(dp[n]!=-1) return dp[n];
        int ans=0;
        ans+=climbStairsMemo(n-1,dp);
        ans+=climbStairsMemo(n-2,dp);
        return dp[n]=ans;

    }

  public int climbStairsTab(int n){
    if (n == 0) return 0;
    if (n == 1) return 1;

    int[] dp = new int[n + 1];
    dp[0] = 1; // 1 way to stay at 0
    dp[1] = 1; // 1 way to reach step 1

    for (int i = 2; i <= n; i++) {
        dp[i] = dp[i - 1] + dp[i - 2];
    }

    return dp[n];
}

public int climbStairs(int n){
    int prev1=1;
    int prev2=1;
    for(int i=2;i<=n;i++){
        int curr=prev1+prev2;
        prev1=prev2;
        prev2=curr;
    }
    return prev2;
}


}
