https://leetcode.com/problems/min-cost-climbing-stairs/description/

class Solution {
   
    public int minCostClimbingStairs(int[] cost) {
        int[] dp=new int[cost.length];
        Arrays.fill(dp,-1);
        // return Math.min(minCostRecur(cost,0),minCostRecur(cost,1));
        //return Math.min(minCostMemo(cost,cost.length,dp),minCostMemo(cost,cost.length,dp));
       // return Math.min(minCostTab(cost),minCostTab(cost));
         return Math.min(minCostSpaceOpt(cost),minCostSpaceOpt(cost));
    }

    public int minCostRecur(int[] cost,int i){
        if(i>=cost.length) {
            return 0;
        }

        int jumpOne=minCostRecur(cost,i+1);
        int jumpTwo=minCostRecur(cost,i+2);

        return cost[i]+Math.min(jumpOne,jumpTwo);
    }

    public int minCostMemo(int[] cost,int i,int[] dp){
         if(i>=cost.length) {
            return 0;
        }
        if(dp[i]!=-1) return dp[i];
        int jumpOne=minCostMemo(cost,i+1,dp);
        int jumpTwo=minCostMemo(cost,i+2,dp);

        return dp[i]=cost[i]+Math.min(jumpOne,jumpTwo);
    }

    public int minCostTab(int[] cost){
        int[] dp=new int[cost.length+1];
        dp[0]=0;
        dp[1]=0;
        for(int i=2;i<=cost.length;i++){
            dp[i]=Math.min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);
        }
        return dp[cost.length];
    }

    public int minCostSpaceOpt(int[] cost){
        int prev1=0;
        int prev2=0;
         for(int i=2;i<=cost.length;i++){
           // dp[i]=Math.min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);
           int curr=Math.min(prev2+cost[i-1],prev1+cost[i-2]);
           prev1=prev2;
           prev2=curr;
        }
        return prev2;
    }
}
