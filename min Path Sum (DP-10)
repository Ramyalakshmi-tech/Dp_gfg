https://leetcode.com/problems/minimum-path-sum/description/

class Solution {
    int res=Integer.MAX_VALUE;
    int[][] dir={{0,1},{1,0}};
    public int minPathSumMemo(int[][] grid) {
        //return minPathRecur(grid,0,0);
        int[][] dp=new int[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++)
            Arrays.fill(dp[i],-1);
        return minPathMemo(grid,0,0,dp);
    }

  public int minPathRecur(int[][] grid, int x, int y) {
        int m = grid.length;
        int n = grid[0].length;

        // If out of bounds
        if (x >= m || y >= n) return Integer.MAX_VALUE;

        // Base case: reached destination
        if (x == m - 1 && y == n - 1) return grid[x][y];

        int min = Integer.MAX_VALUE;

        // Explore right and down directions
        for (int i = 0; i < dir.length; i++) {
            int newX = x + dir[i][0];
            int newY = y + dir[i][1];

            int pathSum = minPathRecur(grid, newX, newY);
            min = Math.min(min, pathSum);
        }

        return grid[x][y] + min;
    }

   public int minPathMemo(int[][] grid, int x, int y, int[][] dp) {
        int m = grid.length;
        int n = grid[0].length;
        if (x >= m || y >= n) return Integer.MAX_VALUE;
        if (x == m - 1 && y == n - 1) return grid[x][y];
        if (dp[x][y] != -1) return dp[x][y];
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < dir.length; i++) {
            int newX = x + dir[i][0];
            int newY = y + dir[i][1];

            int pathSum = minPathMemo(grid, newX, newY, dp);

            if (pathSum != Integer.MAX_VALUE) {
                min = Math.min(min, pathSum);
            }
        }

        dp[x][y] = grid[x][y] + min;
        return dp[x][y];
    }

    public int minPathTab(int[][] grid){
          int m = grid.length;
        int n = grid[0].length;
        int[][] dp=new int[m][n];
        dp[0][0]=grid[0][0];
        for(int i=1;i<m;i++){
            dp[i][0]=grid[i][0]+dp[i-1][0];
        }
        for(int j=1;j<n;j++){
            dp[0][j]=grid[0][j]+dp[0][j-1];
        }

        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=grid[i][j]+Math.min(dp[i][j-1],dp[i-1][j]);
            }
        }

        return dp[m-1][n-1];
    }

   public int minPathSum(int[][] grid) {
    int m = grid.length;
    int n = grid[0].length;

    int[] dp = new int[n];
    dp[0] = grid[0][0];

    // Fill the first row
    for (int j = 1; j < n; j++) {
        dp[j] = dp[j - 1] + grid[0][j];
    }

    for (int i = 1; i < m; i++) {
        dp[0] += grid[i][0]; // Update first column for current row
        for (int j = 1; j < n; j++) {
            dp[j] = grid[i][j] + Math.min(dp[j], dp[j - 1]);
        }
    }

    return dp[n - 1];
   }

}

