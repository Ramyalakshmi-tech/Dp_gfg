https://leetcode.com/problems/house-robber/description/

class Solution {
    public int robMem(int[] nums) {
        int[] dp=new int[nums.length];
        Arrays.fill(dp,-1);
        //return robRecur(nums,0);
        return robMemo(nums,0,dp);
    }

    public int robRecur(int[] nums,int i){
        if(i>=nums.length) return 0;
        int withStart=nums[i]+robRecur(nums,i+2);
        int withOutStart=robRecur(nums,i+1);
        return Math.max(withStart,withOutStart);
    }

    public int robMemo(int[] nums,int i,int[] dp){
        if(i>=nums.length) return 0;
        if(dp[i]!=-1) return dp[i];
        int withStart=nums[i]+robMemo(nums,i+2,dp);
        int withOutStart=robMemo(nums,i+1,dp);
        return dp[i]=Math.max(withStart,withOutStart);
    } 

    public int robTab(int[] nums){
        int[] dp=new int[nums.length];
        dp[0]=nums[0];
        if(nums.length>1)
        dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<nums.length;i++){
            dp[i]=Math.max(nums[i]+dp[i-2],dp[i-1]);
        }
         return dp[nums.length-1];
    } 

  public int rob(int[] nums) {
    if (nums.length == 0) return 0;
    if (nums.length == 1) return nums[0];

    int prev1 = nums[0];
    int prev2 = Math.max(nums[0], nums[1]);

    for (int i = 2; i < nums.length; i++) {
        int curr = Math.max(nums[i] + prev1, prev2);
        prev1 = prev2;
        prev2 = curr;
    }

    return prev2;
}

}
