https://leetcode.com/problems/unique-paths/description/

class Solution {
    int[][] dir={{0,1},{1,0}};
    
    public int uniquePathsMemo(int m, int n) {
       // return uniquePathsRecur(m,n,0,0);
       int[][] dp=new int[m+1][n+1];
       for(int i=0;i<=m;i++) Arrays.fill(dp[i],-1);
       return uniquePathsMemo(m,n,0,0,dp);
    }

    public int uniquePathsRecur(int m,int n,int x,int y){
         
        if(x>=m || y>=n) return 0;
        if(x==m-1 && y==n-1) return 1;
        int res=0;
        
        for(int i=0;i<dir.length;i++){
            int newX=x+dir[i][0];
            int newY=y+dir[i][1];
            if(newX>=0 && newX<m && newY>=0 && newY<n)
                res+=uniquePathsRecur(m,n,newX,newY);
        }
        return res;
    }

    public int uniquePathsMemo(int m,int n,int x,int y,int[][] dp){
         if(x>=m || y>=n) return 0;
        if(x==m-1 && y==n-1) return 1;
        if(dp[x][y]!=-1) return dp[x][y];
        int res=0;
        
        for(int i=0;i<dir.length;i++){
            int newX=x+dir[i][0];
            int newY=y+dir[i][1];
            if(newX>=0 && newX<m && newY>=0 && newY<n)
                res+=uniquePathsMemo(m,n,newX,newY,dp);
        }
        return dp[x][y]=res;
    }

    public int uniquePathsTab(int m,int n){
        int[][] dp=new int[m][n];
        for(int i=0;i<m;i++){
            dp[i][0]=1;
        } 
        for(int j=0;j<n;j++){
            dp[0][j]=1;
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
    }

    public int uniquePaths(int m, int n) {
    int[] dp = new int[n];
    Arrays.fill(dp, 1); // First row is all 1s

    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            dp[j] = dp[j] + dp[j - 1];
        }
    }

    return dp[n - 1];
}

}
