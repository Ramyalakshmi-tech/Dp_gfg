https://leetcode.com/problems/unique-paths-ii/description/

class Solution {
       int[][] dir={{0,1},{1,0}};
    public int uniquePathsWithObstaclesMemo(int[][] obstacleGrid) {
            int m=obstacleGrid.length;
            int n=obstacleGrid[0].length;
            if (obstacleGrid[0][0] == 1 || obstacleGrid[m-1][n-1] == 1)
                return 0;
       int[][] dp=new int[m+1][n+1];
       for(int i=0;i<=m;i++) Arrays.fill(dp[i],-1);
       return uniquePathsMemo(m,n,0,0,obstacleGrid,dp);
    }

    public int uniquePathsRecur(int m,int n,int x,int y,int[][] obstacleGrid){
         
        if(x>=m || y>=n) return 0;
        if(x==m-1 && y==n-1) return 1;
        int res=0;
        
        for(int i=0;i<dir.length;i++){
            int newX=x+dir[i][0];
            int newY=y+dir[i][1];
            if(newX>=0 && newX<m && newY>=0 && newY<n && obstacleGrid[newX][newY]!=1)
                res+=uniquePathsRecur(m,n,newX,newY,obstacleGrid);
        }
        return res;
    }

     public int uniquePathsMemo(int m,int n,int x,int y,int[][] grid,int[][] dp){
        
         if(x>=m || y>=n) return 0;
        if(x==m-1 && y==n-1) return 1;
        if(dp[x][y]!=-1) return dp[x][y];
        int res=0;
        
        for(int i=0;i<dir.length;i++){
            int newX=x+dir[i][0];
            int newY=y+dir[i][1];
            if(newX>=0 && newX<m && newY>=0 && newY<n && grid[newX][newY]!=1)
                res+=uniquePathsMemo(m,n,newX,newY,grid,dp);
        }
        return dp[x][y]=res;
    }

public int uniquePathsWithObstaclesTab(int[][] obstacleGrid) {
    int m = obstacleGrid.length;
    int n = obstacleGrid[0].length;
    int[][] dp = new int[m][n];

    // Initialize first cell
    if (obstacleGrid[0][0] == 1) return 0;
    dp[0][0] = 1;

    // First column
    for (int i = 1; i < m; i++) {
        dp[i][0] = (obstacleGrid[i][0] == 1) ? 0 : dp[i - 1][0];
    }

    // First row
    for (int j = 1; j < n; j++) {
        dp[0][j] = (obstacleGrid[0][j] == 1) ? 0 : dp[0][j - 1];
    }

    // Fill the rest
    for (int i = 1; i < m; i++) {
        for (int j = 1; j < n; j++) {
            if (obstacleGrid[i][j] == 1) {
                dp[i][j] = 0;
            } else {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
    }

    return dp[m - 1][n - 1];
}
public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[] dp = new int[n];
        if(obstacleGrid[0][0]==1) dp[0]=0;
            else dp[0]=1;
        for(int i=1;i<n;i++){
            if(obstacleGrid[0][i]!=1) dp[i]=dp[i-1];
            else dp[i]=0;
        }


        for (int i = 1; i < m; i++) {
            if(obstacleGrid[i][0]==1) dp[0]=0;
            
            for (int j = 1; j < n; j++) {
                if(obstacleGrid[i][j]==1) dp[j]=0;
                else dp[j] = dp[j] + dp[j - 1];
            }
        }

        return dp[n - 1];
}

}
